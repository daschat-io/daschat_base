{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"daschat-handsoff-base \u00b6 Base package for the development of integration modules with chat applications for the handsoff of conversations. Features \u00b6 Free software: MIT Documentation: https://daschat-io.github.io/daschat_base/ Enabling Python versions \u00b6 Install Python versions using pyenv and enable all versions to be used with tox : 1 2 3 $ pyenv install 3 .8.10 3 .9.5 $ pyenv shell 3 .8.10 3 .9.5 $ pyenv local 3 .8.10 Acknowledgements \u00b6 Cookiecutter zillionare/cookiecutter-pypackage Naereen/badges","title":"home"},{"location":"#daschat-handsoff-base","text":"Base package for the development of integration modules with chat applications for the handsoff of conversations.","title":"daschat-handsoff-base"},{"location":"#features","text":"Free software: MIT Documentation: https://daschat-io.github.io/daschat_base/","title":"Features"},{"location":"#enabling-python-versions","text":"Install Python versions using pyenv and enable all versions to be used with tox : 1 2 3 $ pyenv install 3 .8.10 3 .9.5 $ pyenv shell 3 .8.10 3 .9.5 $ pyenv local 3 .8.10","title":"Enabling Python versions"},{"location":"#acknowledgements","text":"Cookiecutter zillionare/cookiecutter-pypackage Naereen/badges","title":"Acknowledgements"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Abner G Jacobsen abner@apoana.com.br Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Abner G Jacobsen abner@apoana.com.br","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/daschat-io/daschat_base/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Base package for the development of integration modules with chat applications for the handsoff of conversations. could always use more documentation, whether as part of the official Base package for the development of integration modules with chat applications for the handsoff of conversations. docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/daschat-io/daschat_base/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up daschat_base for local development. Fork the daschat_base repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/daschat_base.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/daschat-io/daschat_base/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest -v tests.test_daschat_handsoff_base ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes for version are committed in pyproject.toml , version.py and test_daschat_handsoff_base.py (including an entry in HISTORY.md). Then run: 1 2 3 $ git tag -a v0.14.0 -m \"Version 0.14.0\" $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/daschat-io/daschat_base/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Base package for the development of integration modules with chat applications for the handsoff of conversations. could always use more documentation, whether as part of the official Base package for the development of integration modules with chat applications for the handsoff of conversations. docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/daschat-io/daschat_base/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up daschat_base for local development. Fork the daschat_base repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/daschat_base.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/daschat-io/daschat_base/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest -v tests.test_daschat_handsoff_base ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes for version are committed in pyproject.toml , version.py and test_daschat_handsoff_base.py (including an entry in HISTORY.md). Then run: 1 2 3 $ git tag -a v0.14.0 -m \"Version 0.14.0\" $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.15.4 (2022-02-18) \u00b6 Refactor code \u00b6 Create directory schemas to hold schemas definitions. Add or update types \u00b6 Added slots field to Chat and Contact schemas. Added schema file slots.py with new schamas to suppor usage of slots fields. 0.15.3 (2022-01-11) \u00b6 Add or update types \u00b6 Added id field to the MessageSchema schema. In the future it will be used to track the origin of the message. 0.15.2 (2021-11-06) \u00b6 \u00b6 Added support for Python 3.7 0.14.0 (2021-10-25) \u00b6 \u00b6 Breaking changes \u00b6 Add or update types \u00b6 Changed ResultFieldSchema schema renaming field msg_id to id and removed text field. Refactor code \u00b6 Refactored messages.py . 0.13.1 (2021-10-25) \u00b6 Add or update text and literals \u00b6 Added more messages to messages.py and custom message factories. 0.13.0 (2021-10-25) \u00b6 Add or update types \u00b6 Added ResultFieldSchema and DispatchCallOutSchema schemas. They will be used to standardize the return of API calls and modules. Created messages.py to hold all text messages generated by daschat. Added the department field to the MessageSchema schema. In the future it will allow to register in the log who wrote the message sent to the contact. Changed max size of agent_id , agent_name fields in the MessageSchema schema. 0.12.1 (2021-10-23) \u00b6 Add or update types \u00b6 Created version.py for package version info. Created types.py to be the global type and class definition center. Added new enum type MessageDispatchEnum in WebhookTypesEnumtypes.py . Added the dispatch field to the MessageSchema schema. In the future it will allow to select wich module of DasChat will process the message. 0.12.0 (2021-10-23) \u00b6 Add or update types \u00b6 Added the agent_id , agent_name fields to the MessageSchema schema. In the future it will allow to register in the log who wrote the message sent to the contact. Added new webhook type CHAT_FORWARDED in WebhookTypesEnum for when the chat is transferred to another agent or bot. Work in progress \u00b6 Added module dc_abc_channel.py with abstract class ChannelBase for channels plugins. 0.11.1 (2021-10-10) \u00b6 Fix typos \u00b6 Proprerty info has same name as info method. Changed proprerty name to info_data . 0.11.0 (2021-10-13) \u00b6 New features \u00b6 Breaking changes \u00b6 Added info method to HandoffBase class. 0.10.1 (2021-10-10) \u00b6 Fix typos \u00b6 Fixed variable names. Addittional doctrings. 0.10.0 (2021-10-09) \u00b6 Added property chat_id_type to handle handsoff apps, like Rocketchat, that not allow use of the chat_id generated by Daschat 0.9.0 (2021-10-05) \u00b6 Added columns for handsoff app data and chat id control 0.8.0 (2021-07-21) \u00b6 Added webhook enum type for CHAT_TAKEN Docs corrections in how to deploy official version 0.7.0 (2021-07-20) \u00b6 Added CHAT_SESSION as webhook type enum. 0.4.0 (2021-06-28) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#0154-2022-02-18","text":"","title":"0.15.4 (2022-02-18)"},{"location":"history/#refactor-code","text":"Create directory schemas to hold schemas definitions.","title":"Refactor code"},{"location":"history/#add-or-update-types","text":"Added slots field to Chat and Contact schemas. Added schema file slots.py with new schamas to suppor usage of slots fields.","title":"Add or update types"},{"location":"history/#0153-2022-01-11","text":"","title":"0.15.3 (2022-01-11)"},{"location":"history/#add-or-update-types_1","text":"Added id field to the MessageSchema schema. In the future it will be used to track the origin of the message.","title":"Add or update types"},{"location":"history/#0152-2021-11-06","text":"","title":"0.15.2 (2021-11-06)"},{"location":"history/#_1","text":"Added support for Python 3.7","title":""},{"location":"history/#0140-2021-10-25","text":"","title":"0.14.0 (2021-10-25)"},{"location":"history/#_2","text":"","title":""},{"location":"history/#breaking-changes","text":"","title":"Breaking changes"},{"location":"history/#add-or-update-types_2","text":"Changed ResultFieldSchema schema renaming field msg_id to id and removed text field.","title":"Add or update types"},{"location":"history/#refactor-code_1","text":"Refactored messages.py .","title":"Refactor code"},{"location":"history/#0131-2021-10-25","text":"","title":"0.13.1 (2021-10-25)"},{"location":"history/#add-or-update-text-and-literals","text":"Added more messages to messages.py and custom message factories.","title":"Add or update text and literals"},{"location":"history/#0130-2021-10-25","text":"","title":"0.13.0 (2021-10-25)"},{"location":"history/#add-or-update-types_3","text":"Added ResultFieldSchema and DispatchCallOutSchema schemas. They will be used to standardize the return of API calls and modules. Created messages.py to hold all text messages generated by daschat. Added the department field to the MessageSchema schema. In the future it will allow to register in the log who wrote the message sent to the contact. Changed max size of agent_id , agent_name fields in the MessageSchema schema.","title":"Add or update types"},{"location":"history/#0121-2021-10-23","text":"","title":"0.12.1 (2021-10-23)"},{"location":"history/#add-or-update-types_4","text":"Created version.py for package version info. Created types.py to be the global type and class definition center. Added new enum type MessageDispatchEnum in WebhookTypesEnumtypes.py . Added the dispatch field to the MessageSchema schema. In the future it will allow to select wich module of DasChat will process the message.","title":"Add or update types"},{"location":"history/#0120-2021-10-23","text":"","title":"0.12.0 (2021-10-23)"},{"location":"history/#add-or-update-types_5","text":"Added the agent_id , agent_name fields to the MessageSchema schema. In the future it will allow to register in the log who wrote the message sent to the contact. Added new webhook type CHAT_FORWARDED in WebhookTypesEnum for when the chat is transferred to another agent or bot.","title":"Add or update types"},{"location":"history/#work-in-progress","text":"Added module dc_abc_channel.py with abstract class ChannelBase for channels plugins.","title":"Work in progress"},{"location":"history/#0111-2021-10-10","text":"","title":"0.11.1 (2021-10-10)"},{"location":"history/#fix-typos","text":"Proprerty info has same name as info method. Changed proprerty name to info_data .","title":"Fix typos"},{"location":"history/#0110-2021-10-13","text":"","title":"0.11.0 (2021-10-13)"},{"location":"history/#new-features","text":"","title":"New features"},{"location":"history/#breaking-changes_1","text":"Added info method to HandoffBase class.","title":"Breaking changes"},{"location":"history/#0101-2021-10-10","text":"","title":"0.10.1 (2021-10-10)"},{"location":"history/#fix-typos_1","text":"Fixed variable names. Addittional doctrings.","title":"Fix typos"},{"location":"history/#0100-2021-10-09","text":"Added property chat_id_type to handle handsoff apps, like Rocketchat, that not allow use of the chat_id generated by Daschat","title":"0.10.0 (2021-10-09)"},{"location":"history/#090-2021-10-05","text":"Added columns for handsoff app data and chat id control","title":"0.9.0 (2021-10-05)"},{"location":"history/#080-2021-07-21","text":"Added webhook enum type for CHAT_TAKEN Docs corrections in how to deploy official version","title":"0.8.0 (2021-07-21)"},{"location":"history/#070-2021-07-20","text":"Added CHAT_SESSION as webhook type enum.","title":"0.7.0 (2021-07-20)"},{"location":"history/#040-2021-06-28","text":"First release on PyPI.","title":"0.4.0 (2021-06-28)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Base package for the development of integration modules with chat applications for the handsoff of conversations., run this command in your terminal: 1 $ pip install daschat_base This is the preferred method to install Base package for the development of integration modules with chat applications for the handsoff of conversations., as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Base package for the development of integration modules with chat applications for the handsoff of conversations. can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/daschat-io/daschat_base Or download the tarball : 1 $ curl -OJL https://github.com/daschat-io/daschat_base/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Base package for the development of integration modules with chat applications for the handsoff of conversations., run this command in your terminal: 1 $ pip install daschat_base This is the preferred method to install Base package for the development of integration modules with chat applications for the handsoff of conversations., as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Base package for the development of integration modules with chat applications for the handsoff of conversations. can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/daschat-io/daschat_base Or download the tarball : 1 $ curl -OJL https://github.com/daschat-io/daschat_base/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Base package for the development of integration modules with chat applications for the handsoff of conversations. in a project 1 from daschat_base imports schemas","title":"usage"},{"location":"usage/#usage","text":"To use Base package for the development of integration modules with chat applications for the handsoff of conversations. in a project 1 from daschat_base imports schemas","title":"Usage"}]}